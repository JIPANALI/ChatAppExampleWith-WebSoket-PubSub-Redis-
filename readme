
In your code, you're using Redis Pub/Sub along with WebSocket to manage real-time communication between users connected to the WebSocket server. Let's break down the key parts of your question and how things work when users connect through WebSocket.

Key Concepts:
WebSocketServer: This allows clients to connect to your server using WebSocket connections. You're setting up a WebSocket server on port 8080 with this code:

js
Copy code
const wss = new WebSocketServer({ port: 8080 });
Redis Pub/Sub: Redis provides a Publish/Subscribe (Pub/Sub) messaging system. You have two Redis clients:

publishClient: For publishing messages to rooms.
subscribeClient: For subscribing to rooms and receiving messages.
Subscription Object: This stores information about the WebSocket connections and the rooms that each user has subscribed to:

js
Copy code
const subscription: { [key: string]: { ws: WebSocket, rooms: string[] } } = {}
What Happens When Users Connect:
1. User connects to WebSocket (on port 8080):
When a user connects to the WebSocket server (running on port 8080), this block of code is triggered:

js
Copy code
wss.on('connection', function connection(userSocket) {
    const id = randomId(); // Generate a unique ID for the user
    subscription[id] = {
        ws: userSocket,
        rooms: [] // Initially, the user is not subscribed to any rooms
    };
});
A unique id is created for each WebSocket connection.
The WebSocket connection (userSocket) is stored in the subscription object along with the rooms the user will subscribe to.
2. User subscribes to a room (WebSocket SUBSCRIBE message):
When a user sends a SUBSCRIBE message through WebSocket to join a room, this block is executed:

js
Copy code
if (userMessage.type === "SUBSCRIBE") {
    subscription[id].rooms.push(userMessage.room); // Add the room to the user's list of rooms
    
    if (oneUserSubscribedTo(userMessage.room)) { // Check if this is the first user in the room
        subscribeClient.subscribe(userMessage.room, (message) => {
            const userMessage = JSON.parse(message);
            // Send the message to all users subscribed to this room
            Object.keys(subscription).forEach((userId) => {
                const { ws, rooms } = subscription[userId];
                if (rooms.includes(userMessage.roomId)) {
                    ws.send(userMessage.message); // Send the message to each subscribed user
                }
            });
        });
    }
}
Important checks:

subscription[id].rooms.push(userMessage.room): The user is added to the room.
oneUserSubscribedTo(userMessage.room): This function checks if the current user is the first user to subscribe to this room.
If this is the first user subscribing to the room, the server subscribes to the Redis Pub/Sub channel for that room:

js
Copy code
subscribeClient.subscribe(userMessage.room, (message) => {
    // Broadcast the message to all users subscribed to the room
});
3. Sending a Message to a Room:
When any user sends a message to a room using WebSocket, the sendMessage message type is handled:

js
Copy code
if (userMessage.type === "sendMessage") {
    const message = userMessage.message;
    const roomId = userMessage.roomId;
    
    // Publish the message to the Redis Pub/Sub system
    publishClient.publish(roomId, JSON.stringify({
        type: "sendMessage",
        roomId: roomId,
        message
    }));
}
This message is published to Redis, which then notifies all WebSocket clients subscribed to the room.

<!-- What Happens if Two Users Connect on Different WebSocket Servers (Ports 8080 and 8081)? -->
If you start two WebSocket servers, for example, one on port 8080 and one on 8081, they are separate WebSocket servers, which means they have their own WebSocket connections and their own subscription objects.

However, both servers will still be using the same Redis Pub/Sub system. Let's look at what this means for Pub/Sub subscriptions.

Scenario 1: First user connects on port 8080, second user on port 8081
When the first user connects through WebSocket 8080 and subscribes to a room, the Redis subscribeClient will subscribe to that room:

js
Copy code
subscribeClient.subscribe(userMessage.room, (message) => { ... });
This means the WebSocket server on port 8080 is subscribed to receive messages from Redis for that room.

When the second user connects through WebSocket 8081 and subscribes to the same room, the WebSocket server on port 8081 will also subscribe to the Redis Pub/Sub channel for that room.

js
Copy code
subscribeClient.subscribe(userMessage.room, (message) => { ... });
Redis will now have two subscribers: one from the WebSocket server on 8080 and one from the WebSocket server on 8081.
Scenario 2: What happens when a message is published?
When a message is published to the Redis channel (for example, to room room1), both WebSocket servers (8080 and 8081) will receive that message via their Redis subscribeClient subscriptions.
Each server will then broadcast the message to all WebSocket clients that are connected and subscribed to the room.
Does Redis Pub/Sub Create Multiple Subscriptions?
Yes, each WebSocket server (on different ports) will independently subscribe to the same Redis channel if there are users connected to both servers. So:

If WebSocket server 8080 subscribes to room1, Redis will have a subscriber from port 8080.
If WebSocket server 8081 subscribes to room1, Redis will have another subscriber from port 8081.
This means Redis will have two active subscribers for room1, one from each WebSocket server.

In Summary:
Multiple WebSocket servers: If you run WebSocket servers on different ports (8080, 8081, etc.), they will act independently but can still connect to the same Redis Pub/Sub system.

Redis Pub/Sub subscriptions: If users on both WebSocket servers (8080, 8081) subscribe to the same room, Redis will create separate subscriptions for each WebSocket server.

Message broadcasting: When a message is published to Redis, both WebSocket servers will receive the message and broadcast it to their connected users.

Efficiency: While Redis allows multiple subscriptions, each WebSocket server subscribes only once to each room. If multiple users on the same WebSocket server subscribe to a room, only one Redis subscription is made from that server, regardless of how many WebSocket clients are connected.